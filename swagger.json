{
  "openapi": "3.0.1",
  "info": {
    "title": "product-service",
    "contact": {
      "name": "Kumar Priyanshu",
      "email": "kumarpriyanshu2822@gmail.com"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "localhost:8085/products"
    }
  ],
  "tags": [
    {
      "name": "ProductController",
      "description": "APIs for managing products"
    }
  ],
  "paths": {
    "/products": {
      "get": {
        "tags": [
          "GET",
          "ProductController"
        ],
        "summary": "Retrieve all products.",
        "description": "Retrieve all the products from the database.",
        "operationId": "getAllProducts",
        "responses": {
          "200": {
            "description": "Successfully retrieved the products.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ProductController",
          "PUT"
        ],
        "summary": "Updates a product.",
        "description": "Updates a product from the database.",
        "operationId": "updateProduct",
        "parameters": [
          {
            "name": "productDto",
            "in": "query",
            "description": "The Dto containing information for updating the product."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid input for updating the product.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "200": {
            "description": "Successfully updated the product.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDto"
                }
              }
            }
          },
          "404": {
            "description": "Product not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "POST",
          "ProductController"
        ],
        "summary": "Creates a new product.",
        "description": "Creates a new product in the database.",
        "operationId": "createProduct",
        "parameters": [
          {
            "name": "productDto",
            "in": "query",
            "description": "The Dto containing information for creating a new product."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid input for creating a product.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "200": {
            "description": "Successfully created a new product.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDto"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "ProductController",
          "PATCH"
        ],
        "summary": "Partially updates product fields of a product by its Id.",
        "description": "Partially updates product fields of a product identified by the given unique identifier",
        "operationId": "updateProductFields",
        "parameters": [
          {
            "name": "productDto",
            "in": "query",
            "description": "The Dto containing information for updating the product."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid input for updating the product.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "200": {
            "description": "Successfully updated the product.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDto"
                }
              }
            }
          },
          "404": {
            "description": "Product not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/products/{productId}": {
      "get": {
        "tags": [
          "GET",
          "ProductController"
        ],
        "summary": "Retrieves a product by its Id",
        "description": "Retrieves a single product from the database based on its unique identifier.",
        "operationId": "getProductById",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The unique identifier of the product.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the product.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDto"
                }
              }
            }
          },
          "404": {
            "description": "Product not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DELETE",
          "ProductController"
        ],
        "summary": "Deletes a product by its Id.",
        "description": "Deletes a product from the database based on its unique identifier.",
        "operationId": "deleteProductById",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Id of the product to be deleted.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Product not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "200": {
            "description": "Successfully deleted the product.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDto"
                }
              }
            }
          }
        }
      }
    },
    "/products/sorted": {
      "get": {
        "tags": [
          "GET",
          "ProductController"
        ],
        "summary": "Retrieve all products sorted by price.",
        "description": "Retrieve all the products sorted by price in ascending order from the database.",
        "operationId": "getAllProductsSortedByPrice",
        "responses": {
          "200": {
            "description": "Successfully retrieved the products sorted by price.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDto"
                }
              }
            }
          }
        }
      }
    },
    "/products/price/range/{lowerLimit}/{upperLimit}": {
      "get": {
        "tags": [
          "GET",
          "ProductController"
        ],
        "summary": "Retrieves products within the specified price range.",
        "description": "Retrieve all the products within the specified price range from the database.",
        "operationId": "getProductsByPriceRange",
        "parameters": [
          {
            "name": "lowerLimit",
            "in": "path",
            "description": "The lower limit of the price range.",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "upperLimit",
            "in": "path",
            "description": "The upper limit of the price range.",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved products within the specified price range.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid price range parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ProductDto": {
        "required": [
          "productName"
        ],
        "type": "object",
        "properties": {
          "productId": {
            "type": "integer",
            "format": "int64"
          },
          "productName": {
            "pattern": "^[a-zA-Z ]*$",
            "type": "string"
          },
          "productPrice": {
            "maximum": 100000,
            "minimum": 100,
            "type": "number",
            "format": "double"
          }
        }
      },
      "ErrorDto": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    }
  }
}